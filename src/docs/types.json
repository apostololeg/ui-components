{"global":{"Size":{"value":"'s' | 'm' | 'l'","isPlain":true},"Variant":{"value":"'clear' | 'default' | 'primary'","isPlain":true},"ComponentType":{"kind":"type","className":{"value":"string","optional":true}}},"AssistiveText":{"Props":{"kind":"type","ext":["HTMLAttributes<HTMLDivElement>"],"className":{"value":"string","optional":true},"size":{"value":"'s' | 'm' | 'l'","enum":["'s'","'m'","'l';"],"optional":true},"variant":{"value":"'default' | 'danger'","enum":["'default'","'danger';"],"optional":true},"children":{"value":"ReactChild"}}},"Button":{"Props":{"kind":"type","ext":["HTMLAttributes<HTMLButtonElement>"],"className":{"value":"string","comment":"CSS class name(s) to be applied to the component","optional":true},"children":{"value":"ReactNode","comment":"Text or child elements to be displayed inside the button"},"variant":{"value":"Variant","comment":"Style variant of the button","optional":true},"size":{"value":"Size","comment":"Size of the button","optional":true},"loading":{"value":"boolean","comment":"Whether the button should be in a loading state","optional":true},"checked":{"value":"boolean","comment":"Whether the button should be in a checked state","optional":true},"square":{"value":"boolean","comment":"Whether the button should have a square shape","optional":true},"prefixElem":{"value":"ReactNode","comment":"Element to be prepended to the children","optional":true},"postfixElem":{"value":"ReactNode","comment":"Element to be appended to the children","optional":true}}},"ButtonGroup":{"Props":{"kind":"type","ext":["HTMLAttributes<HTMLDivElement>"],"children":{"value":"React.ReactNode"},"className":{"value":"string","optional":true}}},"Checkbox":{"Props":{"kind":"type","ext":["HTMLAttributes<HTMLInputElement>"],"label":{"value":"ReactNode","comment":"Used to associate the checkbox with its label.\nThis allows users to click on the label instead of the small checkbox,\nwhich can be especially helpful for users with mobility or vision impairments.\n\nIt can also improve the SEO of the page,\nas search engines can use the label text to better understand the content of the page.","optional":true},"checked":{"value":"boolean","comment":"Whether the checkbox is currently selected","optional":true},"error":{"value":"string | boolean","comment":"Defines an error message or error status for the input field","enum":["string","boolean;"],"optional":true},"size":{"value":"Size","comment":"Size of the checkbox","optional":true}}},"Container":{"Props":{"kind":"type","className":{"value":"string","optional":true},"size":{"value":"'s' | 'm' | 'l' | 'xl'","enum":["'s'","'m'","'l'","'xl';"],"optional":true},"children":{"value":"any"},"alignItemsCenter":{"value":"boolean","optional":true},"justifyContentCenter":{"value":"boolean","optional":true},"vertical":{"value":"boolean","optional":true},"fullHeight":{"value":"boolean | string","enum":["boolean","string;"],"optional":true},"fullWidth":{"value":"boolean | string","enum":["boolean","string;"],"optional":true},"scrolledX":{"value":"boolean","optional":true},"scrolledY":{"value":"boolean","optional":true},"style":{"value":"Partial<CSSStyleDeclaration>","optional":true}}},"DateTime":{"Props":{"kind":"type","value":{"value":"Date | Moment | string","enum":["Date","Moment","string;"],"optional":true},"format":{"value":"string","optional":true},"locale":{"value":"string","optional":true},"children":{"value":"ReactNode","optional":true}}},"Expand":{"ContentProps":{"value":"HTMLAttributes<HTMLDivElement> & { className?: string }","isPlain":true},"Props":{"kind":"type","className":{"value":"string","optional":true},"size":{"value":"Size","optional":true},"isOpen":{"value":"boolean"},"header":{"value":"ReactNode"},"headerClassName":{"value":"string","optional":true},"content":{"value":"(props: ContentProps) => ReactNode | ReactNode","enum":["(props: ContentProps) => ReactNode","ReactNode;"]},"contentProps":{"value":"ContentProps","optional":true},"onChange":{"value":"(isOpen: boolean) => void","optional":true}}},"Form":{"FormValidationSchema":{"value":"ValidationSchema","isPlain":true},"FormValues":{"value":"{ [name: string]: any }","isPlain":true},"FieldError":{"kind":"type","type":{"value":"string","comment":"error type"},"message":{"value":"string"},"expected":{"value":"boolean","optional":true},"actual":{"value":"boolean","optional":true}},"FieldsFlags":{"value":"{ [name: string]: boolean }","isPlain":true},"FieldsErrors":{"value":"{ [name: string]: FieldError }","isPlain":true},"ValidationStateParams":{"kind":"type","values":{"value":"FormValues"},"disabled":{"value":"FieldsFlags"}},"ValidationState":{"kind":"type","isValid":{"value":"boolean"},"errors":{"value":"FieldsErrors"}},"FormApi":{"kind":"type","ext":["ValidationState"],"isDirty":{"value":"boolean"},"isLoading":{"value":"boolean"},"values":{"value":"FormValues"},"touched":{"value":"FieldsFlags"},"changed":{"value":"FieldsFlags"},"Field":{"value":"React.ComponentType"},"setValue":{"value":"(field: string, val: any) => void"},"setValues":{"value":"(values: FormValues) => void"},"reset":{"value":"() => void"}},"FormValidationRule":{"kind":"type","type":{"value":"string","optional":true},"check":{"value":"(value: any,schema: FormValidationSchema,values: FormValues) => boolean;","optional":true},"messages":{"value":"{ [id: string]: string }","optional":true}},"Props":{"kind":"type","ext":["Omit<  FormHTMLAttributes<HTMLFormElement>,  'onSubmit' | 'onChange'>"],"className":{"value":"string","optional":true},"defaultValues":{"value":"FormValues","optional":true},"initialValues":{"value":"FormValues"},"defaultDisabled":{"value":"FieldsFlags","optional":true},"validationSchema":{"value":"FormValidationSchema","optional":true},"markEdited":{"value":"boolean","optional":true},"children":{"value":"(api: FormApi) => JSX.Element | JSX.Element[]","enum":["(api: FormApi) => JSX.Element","JSX.Element[];"]},"onInit":{"value":"(api: FormApi) => boolean | void","enum":["(api: FormApi) => boolean","void;"],"optional":true},"onChange":{"value":"(values: FormValues) => void","optional":true},"onSubmit":{"value":"(values: FormValues) => Promise<void>","optional":true}},"FieldProps":{"kind":"type","name":{"value":"string"},"className":{"value":"string","optional":true},"onChange":{"value":"(e: ChangeEvent, value: any) => void | boolean","enum":["(e: ChangeEvent, value: any) => void","boolean;"]},"markEdited":{"value":"Props['markEdited']","optional":true},"value":{"value":"any"},"isHidden":{"value":"boolean"},"component":{"value":"(props: FormFieldProps) => ReactNode","optional":true},"children":{"value":"ReactNode","optional":true}},"FormFieldProps":{"kind":"type","ext":["FieldProps"],"value":{"value":"any"},"error":{"value":"ValidationError"},"isChanged":{"value":"boolean"},"isTouched":{"value":"boolean"},"clearMargins":{"value":"boolean"},"handleChange":{"value":"(name: string, val: any) => void"},"handleBlur":{"value":"(name: string) => void"}}},"Gallery":{"Props":{"kind":"type","className":{"value":"string","optional":true},"items":{"value":"string[]"},"size":{"value":"Size","optional":true},"animation":{"value":"boolean","optional":true},"startIndex":{"value":"number","optional":true},"onChange":{"value":"(item: string) => void","optional":true}}},"Heading":{"Props":{"kind":"type","id":{"value":"string"},"text":{"value":"ReactNode"}}},"Icon":{"IconSize":{"value":"'xs' | Size","isPlain":true},"IconType":{"value":"keyof typeof CUSTOM_ICONS","isPlain":true},"Props":{"kind":"type","ext":["ComponentType"],"type":{"value":"IconType"},"size":{"value":"IconSize"}}},"Input":{"ControlProps":{"value":"HTMLProps<HTMLInputElement>","isPlain":true},"Value":{"value":"string | number","isPlain":true},"Props":{"kind":"type","ext":["Omit<InputHTMLAttributes<HTMLInputElement>, 'onChange'>"],"name":{"value":"string","comment":"Omit<ControlProps, 'ref'> &","optional":true},"size":{"value":"Size","optional":true},"label":{"value":"string","optional":true},"forceLabelOnTop":{"value":"boolean","comment":"For label to be on top of the input,\neven if there is no value/placeholder and not focused","optional":true},"error":{"value":"string | boolean","comment":"Defines an error message or error status for the input field","enum":["string","boolean;"],"optional":true},"clear":{"value":"boolean","comment":"render without borders and outline","optional":true},"hasClear":{"value":"boolean","comment":"Whether the input field should include a clear button that clears the input value when clicked","optional":true},"changeOnEnd":{"value":"boolean","comment":"Whether the onChange event should be triggered only when the user finishes typing (focus lost) or immediately after each keystroke (default)","optional":true},"adornmentLeft":{"value":"string | ReactNode","comment":"Adornment to be displayed to the left of the input field","enum":["string","ReactNode;"],"optional":true},"adornmentLeftClassName":{"value":"string","optional":true},"adornmentRight":{"value":"string | ReactNode","comment":"Adornment to be displayed to the right of the input field","enum":["string","ReactNode;"],"optional":true},"adornmentRightClassName":{"value":"string","optional":true},"onClear":{"value":"() => void","comment":"A callback function that is called when the input field's value is cleared using the clear button (if hasClear is true)","optional":true},"controlProps":{"value":"ControlProps & ComponentType","comment":"Additional props for the underlying HTML input element","optional":true},"checkAutofill":{"value":"boolean","comment":"Whether to check for autofill values and update the input field's value accordingly","optional":true}}},"InputFile":{"ProgressParams":{"kind":"type","loaded":{"value":"number"},"total":{"value":"number"}},"OnProgress":{"value":"(args: ProgressParams) => void","isPlain":true},"Uploader":{"kind":"type","value":"(  file: File,  fn: OnProgress,  getXHR?: (xhr: XMLHttpRequest) => void) => Promise<string>;"},"Value":{"value":"string[]","isPlain":true},"Props":{"kind":"type","className":{"value":"string","optional":true},"label":{"value":"string","optional":true},"size":{"value":"string","optional":true},"upload":{"value":"Uploader","comment":"Function that uploads the selected file and returns a Promise that\nresolves with the URL of the uploaded file.\n\nIt takes three arguments:\n- file - A File object representing the file to be uploaded.\n- fn - A callback function that is called with an object containing the loaded and total progress values during the upload process.\n- getXHR (optional) - A function that is called with an XMLHttpRequest object representing the underlying request. This can be used to set custom headers or other options on the request."},"uploadOnDemand":{"value":"(upload: (fn: Uploader) => Promise<Value>) => void","comment":"Callback that allows the caller to trigger an upload of selected files.\nIt takes a function as an argument, which should be called with the upload function as its argument.\nThis function can be used to trigger an upload after the user has made their selections.","optional":true},"accept":{"value":"HTMLProps<HTMLInputElement>['accept']","comment":"File types accepted by the component","optional":true},"limit":{"value":"number","comment":"Maximum file size allowed in megabytes","optional":true},"maxCount":{"value":"number","comment":"Maximum number of files allowed to be uploaded","optional":true},"value":{"value":"Value","comment":"URLs of uploaded files","optional":true},"onSelect":{"value":"(files: File[]) => void","comment":"Callback that is called when the upload is complete.\nIt takes two arguments:\n- e - ChangeEvent\n- value - URLs of uploaded files","optional":true},"onChange":{"value":"(e: ChangeEvent<HTMLInputElement>, value: Value) => void","comment":"Callback that is called with an array of File objects representing the selected file(s)."},"remove":{"value":"(fileName: string) => Promise<boolean>","comment":"A function that removes the file from the server.\nIt takes a string representing the name of the file to be removed and returns a Promise that resolves with a boolean value indicating whether the removal was successful or not","optional":true}}},"Label":{"Props":{"kind":"type","className":{"value":"string","optional":true},"size":{"value":"string","optional":true},"children":{"value":"string"},"isOnTop":{"value":"boolean"},"isFocused":{"value":"boolean","optional":true},"disabled":{"value":"boolean","optional":true},"isError":{"value":"boolean","optional":true},"onClipPathChange":{"value":"(clipPath: string) => void","optional":true}}},"Lazy":{"Loader":{"value":"() => Promise<any>","isPlain":true},"Props":{"value":"{ loader: Loader; progressElem: ReactNode }","isPlain":true},"State":{"value":"{ loading: boolean }","isPlain":true}},"LightBox":{"Props":{"kind":"type","isOpen":{"value":"boolean","optional":true},"onClose":{"value":"() => void"},"children":{"value":"ReactNode"}}},"Notifications":{"NotificationType":{"value":"'warning' | 'danger' | 'loading'","isPlain":true},"LinkType":{"kind":"type","text":{"value":"string"},"href":{"value":"string"}},"Props":{"kind":"type","id":{"value":"string"},"type":{"value":"NotificationType","optional":true},"title":{"value":"string","optional":true},"content":{"value":"string","optional":true},"links":{"value":"LinkType[]","optional":true},"LinkComponent":{"value":"JSX.Element","optional":true},"visible":{"value":"() => void"},"pause":{"value":"() => void"},"unpause":{"value":"() => void"},"close":{"value":"(id: string) => void"}}},"Paranja":{"Props":{"kind":"type","children":{"value":"ReactNode","optional":true},"className":{"value":"string","optional":true}}},"Popup":{"TriggerPropsType":{"kind":"type","ext":["DetailedHTMLProps<  HTMLAttributes<HTMLDivElement>,  HTMLDivElement>"],"className":{"value":"string","optional":true}},"WrapperPropsType":{"kind":"type","ext":["DetailedHTMLProps<  HTMLAttributes<HTMLDivElement>,  HTMLDivElement>"],"className":{"value":"string","optional":true}},"Props":{"kind":"type","isOpen":{"value":"boolean","optional":true},"className":{"value":"string","optional":true},"autoClose":{"value":"boolean","comment":"close popup when clicked","optional":true},"controllable":{"value":"boolean","comment":"disable handling focus and click events to update open state","optional":true},"hoverControl":{"value":"boolean","comment":"open/close popup on pointer over/out","optional":true},"disabled":{"value":"boolean","optional":true},"outlined":{"value":"boolean","optional":true},"inline":{"value":"boolean","optional":true},"flat":{"value":"boolean","optional":true},"paranja":{"value":"boolean","optional":true},"size":{"value":"Size","optional":true},"elevation":{"value":"1 | 2","enum":["1","2;"],"optional":true},"direction":{"value":"Direction"},"trigger":{"value":"ReactNode","optional":true},"triggerProps":{"value":"TriggerPropsType","optional":true},"content":{"value":"ReactNode"},"contentProps":{"value":"any","optional":true},"wrapperProps":{"value":"WrapperPropsType","optional":true},"onOpen":{"value":"() => void","optional":true},"onClose":{"value":"() => void","optional":true},"onTriggerFocus":{"value":"(e: FocusEvent) => void","optional":true},"onTriggerBlur":{"value":"(e: FocusEvent) => void","optional":true},"hookBeforeOpen":{"value":"() => boolean | void","enum":["() => boolean","void;"],"optional":true},"hookBeforeClose":{"value":"() => boolean | void","enum":["() => boolean","void;"],"optional":true}},"State":{"kind":"type","isOpen":{"value":"boolean"},"isContentVisible":{"value":"boolean"}}},"PopupMenu":{"Item":{"kind":"type","ext":["Pick<ButtonProps, 'onClick'>"],"id":{"value":"string"},"title":{"value":"ReactNode"},"className":{"value":"string","optional":true}},"Props":{"kind":"type","ext":["Omit<PopupProps, 'content'>"],"trigger":{"value":"ReactNode"},"items":{"value":"Item[]"},"onClose":{"value":"() => void","optional":true}}},"RequiredStar":{"Props":{"kind":"type","className":{"value":"string","optional":true},"size":{"value":"IconSize","optional":true},"inline":{"value":"boolean","optional":true}}},"Link":{"Props":{"kind":"type","ext":["HTMLProps<HTMLAnchorElement>"],"store":{"value":"any","optional":true},"className":{"value":"string","optional":true},"exactClassName":{"value":"string","optional":true},"isPartialExact":{"value":"boolean","optional":true},"isDisabled":{"value":"boolean","optional":true},"isClear":{"value":"boolean","optional":true},"inline":{"value":"boolean","optional":true},"onClick":{"value":"(e: React.MouseEvent<HTMLAnchorElement>, href: string) => void","optional":true}}},"Router":{"Props":{"kind":"type","store":{"value":"any","optional":true},"children":{"value":"ReactNode"},"rootPath":{"value":"string","optional":true}}},"Scroll":{"OffsetAxis":{"value":"{ before?: number; after?: number }","isPlain":true},"Props":{"kind":"type","ext":["Omit<HTMLProps<HTMLDivElement>, 'size'>"],"className":{"value":"string","optional":true},"innerClassName":{"value":"string","optional":true},"thumbClassName":{"value":"string","optional":true},"innerProps":{"value":"HTMLAttributes<HTMLDivElement>","optional":true},"extraWide":{"value":"boolean","optional":true},"x":{"value":"boolean","optional":true},"y":{"value":"boolean","optional":true},"size":{"value":"Size","optional":true},"smooth":{"value":"boolean","comment":"smooth scroll","optional":true},"autoHide":{"value":"boolean","optional":true},"offset":{"value":"{ x?: OffsetAxis; y?: OffsetAxis }","optional":true},"onScroll":{"value":"(e: React.UIEvent<HTMLDivElement>) => void","optional":true}}},"Select":{"Id":{"value":"string | number","isPlain":true},"Option":{"kind":"type","id":{"value":"Id"},"isGroupHeader":{"value":"boolean","optional":true},"parentId":{"value":"Id","optional":true},"label":{"value":"any"},"sortingKey":{"value":"string | number","enum":["string","number;"],"optional":true},"children":{"value":"Option[]","optional":true},"render":{"value":"(label: string) => string","optional":true}},"Preset":{"kind":"type","label":{"value":"string"},"ids":{"value":"Id[]"}},"PresetButtonProps":{"kind":"type","key":{"value":"string"},"children":{"value":"ReactChild"},"onClick":{"value":"() => void"}},"SelectPopupProps":{"kind":"type","value":"Omit<  PopupProps,  | 'disabled'  | 'direction'  | 'autoClose'  | 'onOpen'  | 'onClose'  | 'trigger'  | 'content'> &  Partial<{ direction: PopupProps['direction'] }>;"},"Selected":{"value":"{ [id: string]: true | Id[] }","isPlain":true},"GetInputValParams":{"kind":"type","isFocused":{"value":"boolean"},"searchVal":{"value":"string"},"selected":{"value":"Selected"}},"Props":{"kind":"type","ext":["Partial<  Pick<InputProps, 'required' | 'error' | 'disabled'>>"],"className":{"value":"string","optional":true},"isOpen":{"value":"boolean","optional":true},"optionsClassName":{"value":"string","optional":true},"optionClassName":{"value":"string","optional":true},"name":{"value":"string","optional":true},"label":{"value":"string","optional":true},"additionalLabel":{"value":"ReactNode","optional":true},"size":{"value":"Size","optional":true},"options":{"value":"Option[]"},"limit":{"value":"number","optional":true},"selectTree":{"value":"any","comment":"typeof OptionsTree","optional":true},"isOnlyLeafs":{"value":"boolean","comment":"select only leafs","optional":true},"additionalOptions":{"value":"Option[]","optional":true},"presets":{"value":"Preset[]","optional":true},"clearButton":{"value":"boolean","optional":true},"selectAllButton":{"value":"boolean","optional":true},"sortBy":{"value":"string","optional":true},"groupBy":{"value":"string","optional":true},"value":{"value":"Id | Id[] | null","enum":["Id","Id[]","null;"],"optional":true},"onApi":{"value":"(optionsTree: any) => void","optional":true},"getInputVal":{"value":"(params: GetInputValParams) => string","optional":true},"expandSelected":{"value":"boolean","optional":true},"onChange":{"value":"(value: Id | Id[]) => void","enum":["(value: Id","Id[]) => void;"]},"onFocus":{"value":"InputProps['onFocus']","optional":true},"onBlur":{"value":"InputProps['onBlur']","optional":true},"onOpen":{"value":"() => void","optional":true},"onClose":{"value":"() => void","optional":true},"isSearchable":{"value":"boolean","optional":true},"inputProps":{"value":"Omit<InputProps,'value' | 'onChange' | 'onFocus' | 'onBlur' | 'size'>;","optional":true},"disableTrigger":{"value":"boolean","optional":true},"triggerProps":{"value":"any","optional":true},"popupProps":{"value":"SelectPopupProps","optional":true},"hideRequiredStar":{"value":"boolean","optional":true},"hideErrorMessage":{"value":"boolean","optional":true},"independentSelection":{"value":"boolean","optional":true},"groupSelectedLeafs":{"value":"boolean","optional":true}},"State":{"kind":"type","isFocused":{"value":"boolean"},"isOpen":{"value":"boolean"},"isSelectionLimited":{"value":"boolean"},"selected":{"value":"Selected"},"expanded":{"value":"{ [id: string]: boolean }"},"searchVal":{"value":"string"},"options":{"value":"Option[]"},"labelClipPath":{"value":"string"},"optionsTreeUpd":{"value":"number","comment":"store in state to receive updates"}},"OptionElemProps":{"kind":"type","className":{"value":"string"},"key":{"value":"Option['id']"},"onPointerDown":{"value":"() => void"},"onPointerUp":{"value":"() => void"},"ref":{"value":"RefObject<HTMLDivElement>","optional":true}}},"Spinner":{"Props":{"kind":"type","className":{"value":"string","optional":true},"size":{"value":"Size","optional":true}}},"Tabs":{"ID":{"value":"string | number","isPlain":true},"Item":{"kind":"type","ext":["ButtonProps"],"id":{"value":"ID"},"label":{"value":"string"},"content":{"value":"React.ReactNode | (() => React.ReactNode)","enum":["React.ReactNode","(() => React.ReactNode);"]},"contentClassName":{"value":"string","optional":true},"forceRender":{"value":"boolean","optional":true},"onClick":{"value":"(e: MouseEvent) => boolean | void","enum":["(e: MouseEvent) => boolean","void;"],"optional":true}},"RenderProps":{"kind":"type","tabs":{"value":"React.ReactNode"},"content":{"value":"React.ReactNode"}},"Props":{"kind":"type","size":{"value":"Size","optional":true},"className":{"value":"string","optional":true},"contentClassName":{"value":"string","optional":true},"items":{"value":"Item[]"},"activeId":{"value":"ID","optional":true},"onChange":{"value":"(id: ID) => void"},"renderAll":{"value":"boolean","optional":true},"children":{"value":"(props: RenderProps) => React.ReactNode","optional":true}}},"Theme":{"ThemeConfig":{"kind":"type","ext":["Record<string, string>"],"colors":{"value":"Record<string, string>","optional":true}},"Props":{"kind":"type","config":{"value":"Record<string, string>","optional":true}}},"Virtualized":{"IndexesType":{"kind":"type","first":{"value":"number"},"last":{"value":"number"}},"ItemProps":{"kind":"type","className":{"value":"string"},"style":{"value":"any"},"key":{"value":"number"}},"DefaultProps":{"kind":"type","overlapCount":{"value":"number"}},"State":{"kind":"type","ext":["IndexesType"],"id":{"value":"string"},"height":{"value":"number"},"isFreezed":{"value":"boolean"}},"RenderProps":{"kind":"type","className":{"value":"string","optional":true},"state":{"value":"IndexesType & Pick<State, 'height'>"},"items":{"value":"ReactNode[]"},"onScroll":{"value":"(e: MouseEvent) => void"}},"GetItemPropsParams":{"kind":"type","index":{"value":"number"},"offsetBefore":{"value":"number","optional":true},"offsetAfter":{"value":"number","optional":true}},"ScrollCallbackState":{"kind":"type","ext":["IndexesType"],"scrollTop":{"value":"number"}},"Props":{"kind":"type","ext":["Readonly<DefaultProps>"],"id":{"value":"any","comment":"change to fire render","optional":true},"className":{"value":"string","optional":true},"wrapElem":{"value":"Element | null","enum":["Element","null;"]},"itemHeight":{"value":"number"},"itemsCount":{"value":"number"},"totalCount":{"value":"number"},"overlapCount":{"value":"number","optional":true},"pageSize":{"value":"number","comment":"every `pageSize` will be called `onScrollEnd`","optional":true},"offsetBefore":{"value":"number","optional":true},"offsetAfter":{"value":"number","optional":true},"initialScrollTop":{"value":"number","optional":true},"scrollTop":{"value":"number","comment":"change to update list scrollTop","optional":true},"onScroll":{"value":"(args: ScrollCallbackState) => void","optional":true},"onScrollEnd":{"value":"() => void","optional":true},"children":{"value":"(props: RenderProps) => ReactNode"},"renderItem":{"value":"(props: ItemProps) => ReactElement"},"getItemProps":{"value":"(params: GetItemPropsParams) => { [key: string]: any }"},"style":{"value":"any","optional":true}},"ViewProps":{"value":"Omit<Props, 'children' | 'wrapElem' | 'getItemProps'>","isPlain":true}}}